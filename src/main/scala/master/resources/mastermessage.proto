syntax = "proto3";

package masterMessage;

service Master {
  rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerReply);
  rpc ShuffleComplete(ShuffleCompleteRequest) returns (ShuffleCompleteReply);
  rpc MergeSortComplete(MergeSortCompleteRequest) returns (MergeSortCompleteReply);
  rpc PickBoundariesComplete(GetDataRequest) returns (GetDataResponse);
  rpc MergeComplete(MergeCompleteRequest) returns (MergeCompleteReply); // Merge 완료 상태 전달
}

service Worker {
  rpc StartShuffle(ShuffleRequest) returns (ShuffleReply);
  rpc StartSort(SortRequest) returns (SortReply);
  rpc SendPartitionData(PartitionDataRequest) returns (PartitionDataReply);
}

message RegisterWorkerRequest {
  string ip = 1;
}

message RegisterWorkerReply {
  int32 workerId = 1;
}

message ShuffleRequest {
  int32 workerId = 1;
  repeated bytes records = 2; // 대용량 데이터를 효과적으로 전달하기 위해 bytes 사용
}

message ShuffleReply {
  bool success = 1;
}

message ShuffleCompleteRequest {
  int32 workerId = 1;
}

message ShuffleCompleteReply {
  bool success = 1;
}

message SortRequest {
  int32 workerId = 1;
}

message SortReply {
  bool success = 1;
}

message MergeSortCompleteRequest {
  int32 workerId = 1;
}

message MergeSortCompleteReply {
  bool success = 1;
}

message MergeCompleteRequest {
  int32 workerId = 1;
}

message MergeCompleteReply {
  bool success = 1;
}

message PartitionBoundaries {
  string startKey = 1;
  string endKey = 2;
}

message GetDataRequest {}

message GetDataResponse {
  repeated PartitionBoundaries partitionBoundaries = 1;
}

message PartitionDataRequest {
  int32 senderWorkerId = 1;
  string partitionBoundaries = 2;
  bytes data = 3;
}

message PartitionDataReply {
  bool success = 1;
}
