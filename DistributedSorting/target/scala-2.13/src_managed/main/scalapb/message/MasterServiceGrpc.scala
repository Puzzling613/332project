// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package message


object MasterServiceGrpc {
  val METHOD_REGISTER_WORKER: _root_.io.grpc.MethodDescriptor[message.RegisterWorkerRequest, message.RegisterWorkerReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("message.MasterService", "RegisterWorker"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.RegisterWorkerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.RegisterWorkerReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(message.MessageProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_SHUFFLE_COMPLETE: _root_.io.grpc.MethodDescriptor[message.ShuffleCompleteRequest, message.ShuffleCompleteReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("message.MasterService", "ShuffleComplete"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.ShuffleCompleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.ShuffleCompleteReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(message.MessageProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_MERGE_SORT_COMPLETE: _root_.io.grpc.MethodDescriptor[message.MergeSortCompleteRequest, message.MergeSortCompleteReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("message.MasterService", "MergeSortComplete"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.MergeSortCompleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.MergeSortCompleteReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(message.MessageProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_PICK_BOUNDARIES_COMPLETE: _root_.io.grpc.MethodDescriptor[message.GetDataRequest, message.GetDataResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("message.MasterService", "PickBoundariesComplete"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.GetDataRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.GetDataResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(message.MessageProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_MERGE_COMPLETE: _root_.io.grpc.MethodDescriptor[message.MergeCompleteRequest, message.MergeCompleteReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("message.MasterService", "MergeComplete"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.MergeCompleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[message.MergeCompleteReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(message.MessageProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("message.MasterService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(message.MessageProto.javaDescriptor))
      .addMethod(METHOD_REGISTER_WORKER)
      .addMethod(METHOD_SHUFFLE_COMPLETE)
      .addMethod(METHOD_MERGE_SORT_COMPLETE)
      .addMethod(METHOD_PICK_BOUNDARIES_COMPLETE)
      .addMethod(METHOD_MERGE_COMPLETE)
      .build()
  
  trait MasterService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = MasterService
    def registerWorker(request: message.RegisterWorkerRequest): scala.concurrent.Future[message.RegisterWorkerReply]
    def shuffleComplete(request: message.ShuffleCompleteRequest): scala.concurrent.Future[message.ShuffleCompleteReply]
    def mergeSortComplete(request: message.MergeSortCompleteRequest): scala.concurrent.Future[message.MergeSortCompleteReply]
    def pickBoundariesComplete(request: message.GetDataRequest): scala.concurrent.Future[message.GetDataResponse]
    /** Merge 완료 상태 전달
      */
    def mergeComplete(request: message.MergeCompleteRequest): scala.concurrent.Future[message.MergeCompleteReply]
  }
  
  object MasterService extends _root_.scalapb.grpc.ServiceCompanion[MasterService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[MasterService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = message.MessageProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = message.MessageProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: MasterService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_REGISTER_WORKER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[message.RegisterWorkerRequest, message.RegisterWorkerReply] {
          override def invoke(request: message.RegisterWorkerRequest, observer: _root_.io.grpc.stub.StreamObserver[message.RegisterWorkerReply]): _root_.scala.Unit =
            serviceImpl.registerWorker(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SHUFFLE_COMPLETE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[message.ShuffleCompleteRequest, message.ShuffleCompleteReply] {
          override def invoke(request: message.ShuffleCompleteRequest, observer: _root_.io.grpc.stub.StreamObserver[message.ShuffleCompleteReply]): _root_.scala.Unit =
            serviceImpl.shuffleComplete(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_MERGE_SORT_COMPLETE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[message.MergeSortCompleteRequest, message.MergeSortCompleteReply] {
          override def invoke(request: message.MergeSortCompleteRequest, observer: _root_.io.grpc.stub.StreamObserver[message.MergeSortCompleteReply]): _root_.scala.Unit =
            serviceImpl.mergeSortComplete(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_PICK_BOUNDARIES_COMPLETE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[message.GetDataRequest, message.GetDataResponse] {
          override def invoke(request: message.GetDataRequest, observer: _root_.io.grpc.stub.StreamObserver[message.GetDataResponse]): _root_.scala.Unit =
            serviceImpl.pickBoundariesComplete(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_MERGE_COMPLETE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[message.MergeCompleteRequest, message.MergeCompleteReply] {
          override def invoke(request: message.MergeCompleteRequest, observer: _root_.io.grpc.stub.StreamObserver[message.MergeCompleteReply]): _root_.scala.Unit =
            serviceImpl.mergeComplete(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait MasterServiceBlockingClient {
    def serviceCompanion = MasterService
    def registerWorker(request: message.RegisterWorkerRequest): message.RegisterWorkerReply
    def shuffleComplete(request: message.ShuffleCompleteRequest): message.ShuffleCompleteReply
    def mergeSortComplete(request: message.MergeSortCompleteRequest): message.MergeSortCompleteReply
    def pickBoundariesComplete(request: message.GetDataRequest): message.GetDataResponse
    /** Merge 완료 상태 전달
      */
    def mergeComplete(request: message.MergeCompleteRequest): message.MergeCompleteReply
  }
  
  class MasterServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[MasterServiceBlockingStub](channel, options) with MasterServiceBlockingClient {
    override def registerWorker(request: message.RegisterWorkerRequest): message.RegisterWorkerReply = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REGISTER_WORKER, options, request)
    }
    
    override def shuffleComplete(request: message.ShuffleCompleteRequest): message.ShuffleCompleteReply = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SHUFFLE_COMPLETE, options, request)
    }
    
    override def mergeSortComplete(request: message.MergeSortCompleteRequest): message.MergeSortCompleteReply = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_MERGE_SORT_COMPLETE, options, request)
    }
    
    override def pickBoundariesComplete(request: message.GetDataRequest): message.GetDataResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PICK_BOUNDARIES_COMPLETE, options, request)
    }
    
    /** Merge 완료 상태 전달
      */
    override def mergeComplete(request: message.MergeCompleteRequest): message.MergeCompleteReply = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_MERGE_COMPLETE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): MasterServiceBlockingStub = new MasterServiceBlockingStub(channel, options)
  }
  
  class MasterServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[MasterServiceStub](channel, options) with MasterService {
    override def registerWorker(request: message.RegisterWorkerRequest): scala.concurrent.Future[message.RegisterWorkerReply] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REGISTER_WORKER, options, request)
    }
    
    override def shuffleComplete(request: message.ShuffleCompleteRequest): scala.concurrent.Future[message.ShuffleCompleteReply] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SHUFFLE_COMPLETE, options, request)
    }
    
    override def mergeSortComplete(request: message.MergeSortCompleteRequest): scala.concurrent.Future[message.MergeSortCompleteReply] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_MERGE_SORT_COMPLETE, options, request)
    }
    
    override def pickBoundariesComplete(request: message.GetDataRequest): scala.concurrent.Future[message.GetDataResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PICK_BOUNDARIES_COMPLETE, options, request)
    }
    
    /** Merge 완료 상태 전달
      */
    override def mergeComplete(request: message.MergeCompleteRequest): scala.concurrent.Future[message.MergeCompleteReply] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_MERGE_COMPLETE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): MasterServiceStub = new MasterServiceStub(channel, options)
  }
  
  object MasterServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[MasterServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): MasterServiceStub = new MasterServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[MasterServiceStub] = this
  }
  
  def bindService(serviceImpl: MasterService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = MasterService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): MasterServiceBlockingStub = new MasterServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): MasterServiceStub = new MasterServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = message.MessageProto.javaDescriptor.getServices().get(0)
  
}